				;file F:\HTMCU\MB-T006-HT66F0185\[TEST05] KEY\3key.c
				;1	#include "init.h"
				;2	#include "HT66F0185.h"
				;3			
				;4	//===========================PA端口初始化函数=========================================//
				;5		void GPIOA_INIT(u8 GPIO_Pin,u8 GPIO_Mode,u8 wakeup,u8 GPIO_BitVal)  //u8 为无符号字符型
				;6		{
				@dummy12 .SECTION 'CODE'
				_GPIOA_INIT:
				_GPIOA_INIT:
0010	40BA	mov     GPIO_Pin[0], a
				;7			if ((u8)GPIO_Mode == (u8)0x01)   //pa为输入型时
0011	5737	sdza    GPIO_Mode[0]
0012	2818	jmp     L0018
				;8			 {
				;9			 	_pac|=GPIO_Pin;             //当pa引脚GPIO_Pin为输入，则置位pac ，同时设置上拉电阻
0013	473A	mov     a, GPIO_Pin[0]
0014	0595	orm     a, PAC
				;10			 	_papu|=GPIO_Pin;
0015	473A	mov     a, GPIO_Pin[0]
0016	0596	orm     a, PAPU
0017	281E	jmp     L001E
				;11			 }
				;12			else
				;13			 {
				;14				_pac&=(u8)(~GPIO_Pin);      //将pa设置为输出型 
				L0018:
0018	413A	cpla    GPIO_Pin[0]
0019	40B4	mov     ra, a
001A	4734	mov     a, ra
001B	0695	andm    a, PAC
				;15				_papu&=(u8)(~GPIO_Pin);	
001C	4734	mov     a, ra
001D	0696	andm    a, PAPU
				;16			 }
				;17			 
				;18			if (GPIO_BitVal != RESET)       //重置
				L001E:
001E	50B9	sz      GPIO_BitVal[0]
001F	2821	jmp     L0021
0020	2824	jmp     L0024
				;19			 {
				;20			  	 _pa|=GPIO_Pin;
				L0021:
0021	473A	mov     a, GPIO_Pin[0]
0022	0594	orm     a, PA
0023	2828	jmp     L0028
				;21			 }
				;22			else
				;23			 {
				;24			 	 _pa&=(u8)(~GPIO_Pin);   
				L0024:
0024	413A	cpla    GPIO_Pin[0]
0025	40B4	mov     ra, a
0026	4734	mov     a, ra
0027	0694	andm    a, PA
				L0028:
0028	0003	ret
				;25	
				;26			 }	 	
				;27		}
				;28	//===========================PB端口初始化函数=========================================//
				;29		void GPIOB_INIT(u8 GPIO_Pin,u8 GPIO_Mode,u8 GPIO_BitVal)
				;30		{		 
				_GPIOB_INIT:
				_GPIOB_INIT:
0029	40B9	mov     GPIO_Pin[0], a
				;31			if ((u8)GPIO_Mode == (u8)0x01)
002A	5737	sdza    GPIO_Mode[0]
002B	2831	jmp     L0031
				;32			 {
				;33			 	_pbc|=GPIO_Pin;
002C	4739	mov     a, GPIO_Pin[0]
002D	05A6	orm     a, PBC
				;34			 	_pbpu|=GPIO_Pin;
002E	4739	mov     a, GPIO_Pin[0]
002F	05A7	orm     a, PBPU
0030	2837	jmp     L0037
				;35			 }
				;36			else
				;37			 {
				;38				_pbc&=(u8)(~GPIO_Pin);
				L0031:
0031	4139	cpla    GPIO_Pin[0]
0032	40B4	mov     ra, a
0033	4734	mov     a, ra
0034	06A6	andm    a, PBC
				;39				_pbpu&=(u8)(~GPIO_Pin);	
0035	4734	mov     a, ra
0036	06A7	andm    a, PBPU
				;40			 }
				;41			 
				;42			if (GPIO_BitVal != RESET)
				L0037:
0037	50B8	sz      GPIO_BitVal[0]
0038	283A	jmp     L003A
0039	283D	jmp     L003D
				;43			 {
				;44			   _pb|=GPIO_Pin;
				L003A:
003A	4739	mov     a, GPIO_Pin[0]
003B	05A5	orm     a, PB
003C	2841	jmp     L0041
				;45			 }
				;46			else
				;47			 {
				;48			 	 _pb&=(u8)(~GPIO_Pin);
				L003D:
003D	4139	cpla    GPIO_Pin[0]
003E	40B4	mov     ra, a
003F	4734	mov     a, ra
0040	06A5	andm    a, PB
				L0041:
0041	0003	ret
				;49			 }	 	
				;50		}
				;51	//===========================PC端口初始化函数=========================================//
				;52		void GPIOC_INIT(u8 GPIO_Pin,u8 GPIO_Mode,u8 GPIO_BitVal)
				;53		{
				_GPIOC_INIT:
				_GPIOC_INIT:
0042	40B9	mov     GPIO_Pin[0], a
				;54			 
				;55			if ((u8)GPIO_Mode == (u8)0x01)
0043	5737	sdza    GPIO_Mode[0]
0044	284A	jmp     L004A
				;56			 {
				;57			 	_pcc|=GPIO_Pin;
0045	4739	mov     a, GPIO_Pin[0]
0046	05C2	orm     a, PCC
				;58			 	_pcpu|=GPIO_Pin;
0047	4739	mov     a, GPIO_Pin[0]
0048	05C3	orm     a, PCPU
0049	2850	jmp     L0050
				;59			 }
				;60			else
				;61			 {
				;62				_pcc&=(u8)(~GPIO_Pin);
				L004A:
004A	4139	cpla    GPIO_Pin[0]
004B	40B4	mov     ra, a
004C	4734	mov     a, ra
004D	06C2	andm    a, PCC
				;63				_pcpu&=(u8)(~GPIO_Pin);	
004E	4734	mov     a, ra
004F	06C3	andm    a, PCPU
				;64			 }
				;65			 
				;66			if (GPIO_BitVal != RESET)
				L0050:
0050	50B8	sz      GPIO_BitVal[0]
0051	2853	jmp     L0053
0052	2856	jmp     L0056
				;67			 {
				;68			  	 _pc|=GPIO_Pin;
				L0053:
0053	4739	mov     a, GPIO_Pin[0]
0054	05C1	orm     a, PC
0055	285A	jmp     L005A
				;69			 }
				;70			else
				;71			 {
				;72			 	 _pc&=(u8)(~GPIO_Pin);
				L0056:
0056	4139	cpla    GPIO_Pin[0]
0057	40B4	mov     ra, a
0058	4734	mov     a, ra
0059	06C1	andm    a, PC
				L005A:
005A	0003	ret
				;73			 }	 	
				;74		}
				;75	
				;76	//===========================PD端口初始化函数=========================================//
				;77		void GPIOD_INIT(u8 GPIO_Pin,u8 GPIO_Mode,u8 GPIO_BitVal)
				;78		{
				_GPIOD_INIT:
				_GPIOD_INIT:
005B	40B9	mov     GPIO_Pin[0], a
				;79			 
				;80			if ((u8)GPIO_Mode == (u8)0x01)
005C	5737	sdza    GPIO_Mode[0]
005D	2863	jmp     L0063
				;81			 {
				;82			 	_pdc|=GPIO_Pin;
005E	4739	mov     a, GPIO_Pin[0]
005F	05D3	orm     a, PDC
				;83			 	_pdpu|=GPIO_Pin;
0060	4739	mov     a, GPIO_Pin[0]
0061	05D4	orm     a, PDPU
0062	2869	jmp     L0069
				;84			 }
				;85			else
				;86			 {
				;87				_pdc&=(u8)(~GPIO_Pin);
				L0063:
0063	4139	cpla    GPIO_Pin[0]
0064	40B4	mov     ra, a
0065	4734	mov     a, ra
0066	06D3	andm    a, PDC
				;88				_pdpu&=(u8)(~GPIO_Pin);	
0067	4734	mov     a, ra
0068	06D4	andm    a, PDPU
				;89			 }
				;90			 
				;91			if (GPIO_BitVal != RESET)
				L0069:
0069	50B8	sz      GPIO_BitVal[0]
006A	286C	jmp     L006C
006B	286F	jmp     L006F
				;92			 {
				;93			  	 _pd|=GPIO_Pin;
				L006C:
006C	4739	mov     a, GPIO_Pin[0]
006D	05D2	orm     a, PD
006E	2873	jmp     L0073
				;94			 }
				;95			else
				;96			 {
				;97			 	 _pd&=(u8)(~GPIO_Pin);
				L006F:
006F	4139	cpla    GPIO_Pin[0]
0070	40B4	mov     ra, a
0071	4734	mov     a, ra
0072	06D2	andm    a, PD
				L0073:
0073	0003	ret
				;98			 }	 	
				;99		}
				;100		
				;101	//===========================数据存储区使能配置=========================================//
				;102	void clr_ram_en(unsigned char t)
				;103	{
				_clr_ram_en:
				_clr_ram_en:
0074	40B4	mov     ra, a
0075	40B7	mov     t[0], a
				;104		_dmbp0 = t;
0076	0F01	mov     a, 1H
0077	46B4	andm    a, ra
0078	3404	clr     DMBP0
0079	4734	mov     a, ra
007A	0584	orm     a, BP
				;105		_mp1 = 0x80;
007B	0F80	mov     a, 80H
007C	0083	mov     MP1, a
				;106		while(_mp1!=0)
007D	2880	jmp     L0080
				L0080:
0080	1083	sz      MP1
0081	287E	jmp     L007E
0082	0003	ret
				;107		{
				;108			_iar1 = 0;
				L007E:
007E	1F02	clr     __iar1[0]
				;109			_mp1++;
007F	1483	inc     MP1
				;110		}
				;111	}	
				;112	//===========================时钟初始化函数=========================================//
				;113		void Init_clock(void)
				;114		{
				;115		  	_smod=0x01;            //选择gao速时钟为系统时钟 内部8Mhz
				_Init_clock:
				_Init_clock:
0083	0F01	mov     a, 1H
0084	008B	mov     SMOD, a
				;116		  	while(!_hto);          //等待高速震荡器就位
				_L27:
0085	390B	snz     HTO
0086	2885	jmp     _L27
				;117		  	_wdtc=0x57;            //使能看门狗
0087	0F57	mov     a, 57H
0088	009A	mov     WDTC, a
				;118		  	_acerl=0x00;		   //取消A/D输入
0089	1F44	clr     ACERL
				;119		  	_tmpc=0x00;            //取消相关引脚用作TM 输入/ 输出，相关引脚保持原来功能
008A	1F19	clr     TMPC
				;120		  	_cpc=0x08;             //比较器输出仅内部使用
008B	0F08	mov     a, 8H
008C	00BF	mov     CPC, a
				;121		  	_integ=0x00;			//所有外部中断边沿控制除能
008D	1F0D	clr     INTEG
				;122		  	_int0e=0;				//INTO中断除能
008E	348E	clr     INT0E
				;123		  	_emi = 0;   			//关闭总中断
008F	340E	clr     EMI
				;124	
				;125	//=========LCD控制寄存器引脚设定为其他功能=====================//		
				;126			_slcdc0 = 0;	
0090	1F4A	clr     SLCDC0
				;127			_slcdc1 = 0;
0091	1F4B	clr     SLCDC1
				;128			_slcdc2 = 0;
0092	1F4C	clr     SLCDC2
				;129			_slcdc3 = 0;
0093	1F4D	clr     SLCDC3
				;130			_slcdc4 = 0;
0094	1F4E	clr     SLCDC4
				;131	/***********TM0************/
				;132		  	_tm0c0=0x10;			//选择系统时钟fsys作为t1时钟fint=8MHZ	
0095	0F10	mov     a, 10H
0096	00AF	mov     TM0C0, a
				;133		  	_tm0c1=0xc1;			//定时模式，a匹配
0097	0FC1	mov     a, C1H
0098	00B0	mov     TM0C1, a
				;134		  	_tm0al=0xf8;			//定时初值  0x5f8=1528
0099	0FF8	mov     a, F8H
009A	00B3	mov     TM0AL, a
				;135		  	_tm0ah=0x05;            //1528/8MHZ=191us
009B	0F05	mov     a, 5H
009C	00B4	mov     TM0AH, a
				;136		  	_t0af=0;				//清t中断标志位
009D	3691	clr     T0AF
				;137		  	_t0on=1;				//启动定时
009E	31AF	set     T0ON
				;138		  	_mf0e=1;				//开多功能中断
009F	318E	set     MF0E
				;139		  	_t0ae=1;	    		//开t0中断
00A0	3091	set     T0AE
				;140	/***********时基0************/	  
				;141		  	_tbc=0b00110111;       //时基定时器配置使能 fTBC时钟源 LXT快速启振
00A1	0F37	mov     a, 37H
00A2	009B	mov     TBC, a
				;142		  	//_tb0f=0;               //时基0中断请求标志清零
				;143		  	//_tb0e=0;               //时基0中断控制位使能
				;144		  	
				;145		  	_emi=1;		  			//开总中断
00A3	300E	set     EMI
				;146		  	
				;147		  	GCC_CLRWDT();	       //清除看门狗
00A4	0001	clr     wdt
				;148			clr_ram_en(0);         //数据存储区选择BANK0
00A5	0F00	mov     a, 0H
00A6	2074	call    _clr_ram_en
				;149			clr_ram_en(1);         //数据存储区选择BANK1
00A7	0F01	mov     a, 1H
00A8	2074	call    _clr_ram_en
00A9	0003	ret
				;150	
				;151		}
				;152	
				;153	
				;154	//===========================定时器0中断入口=========================================//
				;155		DEFINE_ISR(isr_TM0, 0x0c)   //定时器0中断函数  191us
				;156		{
				@isr_TM0_code .SECTION 'CODE'
000C	40B5	mov     r10c, a
000D	070A	mov     a, STATUS
000E	40B6	mov     r20c, a
000F	28AA	jmp     _isr_TM0
				;157	    _t0af=0;       //t0中断请求标志清零
				_isr_TM0:
				_isr_TM0:
00AA	3691	clr     T0AF
				;158	    _emi=1;        //开总中断
00AB	300E	set     EMI
				;159	    step3++;
00AC	5496	inc     step3[0]
				;160			if(step3>5)         
00AD	0F05	mov     a, 5H
00AE	4216	sub     a, step3[0]
00AF	3C0A	sz      C
00B0	28B2	jmp     _L28
				;161			 {
				;162				step3=0;		
00B1	5F16	clr     step3[0]
				_L28:
00B2	4736	mov     a, r20c
00B3	008A	mov     STATUS, a
00B4	4735	mov     a, r10c
00B5	0004	reti
				;163	   
				;164			 }			
				;165		}
				;166	
				;167	//===========================主函数=========================================//		
				;168		void main()
				;169		{
				@code .SECTION 'CODE'
				include HT66F0185.inc
0000	2801	jmp     _main_startup1
				@start .SECTION 'CODE'
				_main_startup1:
				@start .SECTION 'CODE'
0001	28B6	jmp     _main
0002	0000	nop
0003	0000	nop
0004	0000	nop
0005	0000	nop
0006	0000	nop
0007	0000	nop
				L0008:
0008	0000	nop
0009	1785	sdz     ACC
000A	2808	jmp     L0008
000B	0003	ret
				;170		   GCC_DELAY(100);  //延时待系统稳定
				_main:
				_main:
00B6	0F18	mov     a, 18H
00B7	2008	call    L0008
				;171		   
				;172		   Init_clock();   //初始化时钟
00B8	2083	call    _Init_clock
				;173	//======================端口初始化==============================//	   
				;174		   GPIOA_INIT(GPIO_Pin_All,GPIO_Mode_OUT,DISABLE,SET);
00B9	0F01	mov     a, 1H
00BA	40B9	mov     GPIO_Pin, a
00BB	5F38	clr     GPIO_BitVal
00BC	5F37	clr     t
00BD	0FFF	mov     a, FFH
00BE	2010	call    _GPIOA_INIT
				;175		   GPIOB_INIT(GPIO_Pin_All,GPIO_Mode_OUT,SET);
00BF	0F01	mov     a, 1H
00C0	40B8	mov     GPIO_BitVal, a
00C1	5F37	clr     t
00C2	0FFF	mov     a, FFH
00C3	2029	call    _GPIOB_INIT
				;176		   GPIOC_INIT(GPIO_Pin_All,GPIO_Mode_OUT,SET);	   
00C4	0F01	mov     a, 1H
00C5	40B8	mov     GPIO_BitVal, a
00C6	5F37	clr     t
00C7	0FFF	mov     a, FFH
00C8	2042	call    _GPIOC_INIT
				;177		   GPIOD_INIT(GPIO_Pin_All,GPIO_Mode_OUT,SET);
00C9	0F01	mov     a, 1H
00CA	40B8	mov     GPIO_BitVal, a
00CB	5F37	clr     t
00CC	0FFF	mov     a, FFH
00CD	205B	call    _GPIOD_INIT
				;178	
				;179	     
				;180	     GPIOB_INIT(GPIO_Pin_2,GPIO_Mode_INT,SET);
00CE	0F01	mov     a, 1H
00CF	40B8	mov     GPIO_BitVal, a
00D0	0F01	mov     a, 1H
00D1	40B7	mov     t, a
00D2	0F04	mov     a, 4H
00D3	2029	call    _GPIOB_INIT
				;181	     GPIOB_INIT(GPIO_Pin_3,GPIO_Mode_INT,SET);
00D4	0F01	mov     a, 1H
00D5	40B8	mov     GPIO_BitVal, a
00D6	0F01	mov     a, 1H
00D7	40B7	mov     t, a
00D8	0F08	mov     a, 8H
00D9	2029	call    _GPIOB_INIT
				;182	     GPIOB_INIT(GPIO_Pin_4,GPIO_Mode_INT,SET);
00DA	0F01	mov     a, 1H
00DB	40B8	mov     GPIO_BitVal, a
00DC	0F01	mov     a, 1H
00DD	40B7	mov     t, a
00DE	0F10	mov     a, 10H
00DF	2029	call    _GPIOB_INIT
				;183	     buz=0;
00E0	3794	clr     PA7
				;184	//======================END====================================//
				;185		   while(1)
				;186			 {
				;187			 	GCC_CLRWDT();          //喂狗		 	
				_L31:
00E1	0001	clr     wdt
				;188	//=====================数码管更新显示=========================//	
				;189	      if((!key1)||(!key2)||(!key3)) 
00E2	3A25	snz     PB4
00E3	28E8	jmp     _L32
00E4	39A5	snz     PB3
00E5	28E8	jmp     _L32
00E6	3D25	sz      PB2
00E7	28EB	jmp     _L33
				;190				{
				;191				  buz=1;
				_L32:
00E8	3394	set     PA7
				;192				  LED1=0;	
00E9	3441	clr     PC0
00EA	28E1	jmp     _L31
				;193				}
				;194				else
				;195				{
				;196					buz=0;
				_L33:
00EB	3794	clr     PA7
				;197					LED1=1;
00EC	3041	set     PC0
00ED	28E1	jmp     _L31
00EE	28EE	jmp     $
				;198				}	 	
				;199	//========================END==================================//
				;200			 }
				;201		}
				data .SECTION 'DATA'
				__iar1 DB DUP (?) ; __iar1
				__mp1 DB DUP (?) ; __mp1
				__bp DB DUP (?) ; __bp
				__smod DB DUP (?) ; __smod
				__integ DB DUP (?) ; __integ
				__intc0 DB DUP (?) ; __intc0
				__mfi0 DB DUP (?) ; __mfi0
				__pa DB DUP (?) ; __pa
				__pac DB DUP (?) ; __pac
				__papu DB DUP (?) ; __papu
				__tmpc DB DUP (?) ; __tmpc
				__wdtc DB DUP (?) ; __wdtc
				__tbc DB DUP (?) ; __tbc
				__pb DB DUP (?) ; __pb
				__pbc DB DUP (?) ; __pbc
				__pbpu DB DUP (?) ; __pbpu
				__tm0c0 DB DUP (?) ; __tm0c0
				__tm0c1 DB DUP (?) ; __tm0c1
				__tm0al DB DUP (?) ; __tm0al
				__tm0ah DB DUP (?) ; __tm0ah
				__cpc DB DUP (?) ; __cpc
				__pc DB DUP (?) ; __pc
				__pcc DB DUP (?) ; __pcc
				__pcpu DB DUP (?) ; __pcpu
				__acerl DB DUP (?) ; __acerl
				__slcdc0 DB DUP (?) ; __slcdc0
				__slcdc1 DB DUP (?) ; __slcdc1
				__slcdc2 DB DUP (?) ; __slcdc2
				__slcdc3 DB DUP (?) ; __slcdc3
				__slcdc4 DB DUP (?) ; __slcdc4
				__pd DB DUP (?) ; __pd
				__pdc DB DUP (?) ; __pdc
				__pdpu DB DUP (?) ; __pdpu
				bBbSound DB DUP (?) ; bBbSound
				bbCnt DB DUP (?) ; bbCnt
				bbTime DB 2 DUP (?) ; bbTime
				bbRam DB DUP (?) ; bbRam
				num8 DB DUP (?) ; num8
				num7 DB DUP (?) ; num7
				num6 DB DUP (?) ; num6
				num5 DB DUP (?) ; num5
				num4 DB 2 DUP (?) ; num4
				num3 DB 2 DUP (?) ; num3
				num2 DB DUP (?) ; num2
				num1 DB DUP (?) ; num1
				wei DB DUP (?) ; wei
				sum1 DB 2 DUP (?) ; sum1
				sum DB 2 DUP (?) ; sum
				value DB DUP (?) ; value
				keystep DB DUP (?) ; keystep
				step3 DB DUP (?) ; step3
				step2 DB DUP (?) ; step2
				step1 DB DUP (?) ; step1
				step DB DUP (?) ; step
				data DB DUP (?) ; data
				t2s DB DUP (?) ; t2s
				t10s DB DUP (?) ; t10s
				tms4 DB DUP (?) ; tms4
				tms3 DB DUP (?) ; tms3
				tms2 DB DUP (?) ; tms2
				tms1 DB DUP (?) ; tms1
				tms DB 2 DUP (?) ; tms
				bj_second DB DUP (?) ; bj_second
				bj_min DB DUP (?) ; bj_min
				peking_min1 DB DUP (?) ; peking_min1
				peking_second1 DB DUP (?) ; peking_second1
				peking_second DB DUP (?) ; peking_second
				peking_min DB DUP (?) ; peking_min
				peking_hour DB DUP (?) ; peking_hour
				alarm_second DB DUP (?) ; alarm_second
				alarm_min DB DUP (?) ; alarm_min
				alarm_hour DB DUP (?) ; alarm_hour
				uF7 DB DUP (?) ; uF7
				uF6 DB DUP (?) ; uF6
				uF5 DB DUP (?) ; uF5
				uF4 DB DUP (?) ; uF4
				uF3 DB DUP (?) ; uF3
				uF2 DB DUP (?) ; uF2
				uF1 DB DUP (?) ; uF1
				ra DB DUP (?)
				r10c DB DUP (?)
				r20c DB DUP (?)
				t DB DUP (?) ; t
				GPIO_BitVal DB DUP (?) ; GPIO_BitVal
				GPIO_Pin DB DUP (?) ; GPIO_Pin
				GPIO_Pin DB DUP (?) ; GPIO_Pin
